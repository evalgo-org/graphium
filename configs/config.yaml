server:
  host: 0.0.0.0
  port: 8095
  debug: true

  # TLS/HTTPS configuration
  tls_enabled: false  # Set to true to enable HTTPS
  tls_cert: /path/to/cert.pem
  tls_key: /path/to/key.pem

  # Timeouts
  read_timeout: 30s
  write_timeout: 30s
  shutdown_timeout: 10s

couchdb:
  url: http://localhost:5985
  database: graphium
  username: admin
  password: testpass

agent:
  api_url: http://localhost:8095
  host_id: localhost-docker
  datacenter: local

  # Docker connection - supports multiple protocols:
  # - Local Unix socket: /var/run/docker.sock (default)
  # - SSH connection: ssh://user@remote-host
  # - SSH with port: ssh://user@remote-host:2222
  # - TCP connection: tcp://remote-host:2376
  # - Explicit Unix: unix:///var/run/docker.sock
  docker_socket: /var/run/docker.sock

  # Examples for remote hosts:
  # docker_socket: ssh://docker@prod-host1.example.com
  # docker_socket: ssh://ubuntu@192.168.1.100:22
  # docker_socket: tcp://docker.example.com:2376

  sync_interval: 30s
  agent_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiYWdlbnQ6bG9jYWxob3N0LWRvY2tlciIsInVzZXJuYW1lIjoiYWdlbnQtbG9jYWxob3N0LWRvY2tlciIsInJvbGVzIjpbImFnZW50Il0sImlzcyI6ImdyYXBoaXVtLWFnZW50Iiwic3ViIjoibG9jYWxob3N0LWRvY2tlciIsImV4cCI6MTc5MzM0NTYyMiwibmJmIjoxNzYxODA5NjIyLCJpYXQiOjE3NjE4MDk2MjJ9.KtlVAj5soqGCzhBKTh3YWXkuq89TSb3tPLfbnxjxxhA

security:
  # Authentication settings
  auth_enabled: false  # Set to true to enable JWT authentication
  jwt_secret: change-me-in-production-use-a-secure-random-string
  jwt_expiration: 24h
  refresh_token_expiration: 168h  # 7 days

  # Agent authentication (uses jwt_secret by default, or override with agent_token_secret)
  # agent_token_secret: optional-separate-secret-for-agents

  # API Keys (for service-to-service authentication)
  # Generate with: openssl rand -base64 32
  api_keys: []
    # - "sk_prod_abc123..."
    # - "sk_test_xyz789..."

  # Rate limiting (requests per second, 0 = disabled)
  rate_limit: 100

  # CORS settings (empty = disabled)
  allowed_origins:
    - http://localhost:3000
    - http://localhost:8095

logging:
  level: info
  format: json
  output: stdout

integrity:
  # Enable database integrity checking
  enabled: true

  # Scan schedule (cron format) - daily at 2 AM
  scan_schedule: "0 2 * * *"

  # Automatic repair configuration
  auto_repair:
    enabled: false  # Require manual approval by default
    max_risk: low   # Only auto-repair low-risk issues
    strategies:
      - latest_wins

  # Resolution strategies by document type
  resolution:
    default_strategy: latest_wins
    strategy_by_type:
      SoftwareApplication: merge  # Containers: try to merge changes
      ComputerServer: latest_wins  # Hosts: use latest version
      Stack: manual                # Stacks: require manual review

  # Validation settings
  validation:
    check_references: true  # Validate referential integrity
    check_schemas: true     # Validate against schemas
    strict_mode: false      # Don't block operations on validation failures

  # Health monitoring
  monitoring:
    health_check_interval: 5m  # Check health every 5 minutes
    alert_threshold: 80        # Alert if health score < 80
    metrics_retention: 720h    # Keep metrics for 30 days

  # Audit logging
  audit:
    enabled: true
    retention: 2160h  # Keep audit logs for 90 days
    log_path: ./logs/integrity/

  # Performance tuning
  performance:
    max_concurrent_operations: 5
    batch_size: 100
    timeout: 30s
