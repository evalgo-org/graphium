definitions:
  api.APIError:
    properties:
      code:
        type: integer
      context:
        additionalProperties: true
        type: object
      details:
        type: string
      field_errors:
        additionalProperties:
          type: string
        type: object
      message:
        type: string
    type: object
  api.BulkResponse:
    properties:
      failed:
        type: integer
      results:
        items:
          $ref: '#/definitions/api.BulkResult'
        type: array
      success:
        type: integer
      total:
        type: integer
    type: object
  api.BulkResult:
    properties:
      error:
        type: string
      id:
        type: string
      reason:
        type: string
      rev:
        type: string
      success:
        type: boolean
    type: object
  api.ChangePasswordRequest:
    properties:
      current_password:
        type: string
      new_password:
        minLength: 8
        type: string
    required:
    - current_password
    - new_password
    type: object
  api.DeployStackRequest:
    properties:
      datacenter:
        type: string
      definitionPath:
        type: string
      description:
        type: string
      hostConstraints:
        items:
          $ref: '#/definitions/models.HostConstraint'
        type: array
      name:
        type: string
      networkMode:
        enum:
        - host-port
        - overlay
        type: string
      placementStrategy:
        enum:
        - auto
        - manual
        - spread
        - datacenter
        type: string
      targetHosts:
        items:
          type: string
        type: array
    required:
    - definitionPath
    - name
    - placementStrategy
    type: object
  api.DeploymentResponse:
    properties:
      completedAt:
        type: string
      errorMessage:
        type: string
      networkConfig:
        $ref: '#/definitions/models.NetworkConfig'
      placements:
        additionalProperties:
          $ref: '#/definitions/models.ContainerPlacement'
        type: object
      stackId:
        type: string
      startedAt:
        type: string
      status:
        type: string
    type: object
  api.ErrorResponse:
    properties:
      details:
        type: string
      error:
        type: string
    type: object
  api.GraphData:
    properties:
      edges:
        items:
          $ref: '#/definitions/api.GraphEdge'
        type: array
      nodes:
        items:
          $ref: '#/definitions/api.GraphNode'
        type: array
    type: object
  api.GraphEdge:
    properties:
      data:
        $ref: '#/definitions/api.GraphEdgeData'
    type: object
  api.GraphEdgeData:
    properties:
      id:
        type: string
      label:
        type: string
      source:
        type: string
      target:
        type: string
      type:
        description: '"hosted_on", "connects_to", "depends_on"'
        type: string
    type: object
  api.GraphNode:
    properties:
      data:
        $ref: '#/definitions/api.GraphNodeData'
    type: object
  api.GraphNodeData:
    properties:
      cpu:
        type: integer
      id:
        type: string
      image:
        type: string
      ip:
        type: string
      label:
        type: string
      location:
        type: string
      memory:
        type: integer
      metadata:
        additionalProperties:
          type: string
        type: object
      status:
        type: string
      type:
        description: '"host", "container"'
        type: string
    type: object
  api.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  api.LoginResponse:
    properties:
      access_token:
        type: string
      expires_at:
        type: string
      refresh_token:
        type: string
      token_type:
        type: string
      user:
        $ref: '#/definitions/api.UserResponse'
    type: object
  api.MessageResponse:
    properties:
      id:
        type: string
      message:
        type: string
    type: object
  api.PaginatedContainersResponse:
    properties:
      containers:
        items:
          $ref: '#/definitions/models.Container'
        type: array
      count:
        description: Number of items in current page
        type: integer
      limit:
        description: Items per page
        type: integer
      offset:
        description: Current offset
        type: integer
      total:
        description: Total number of items
        type: integer
    type: object
  api.PaginatedHostsResponse:
    properties:
      count:
        description: Number of items in current page
        type: integer
      hosts:
        items:
          $ref: '#/definitions/models.Host'
        type: array
      limit:
        description: Items per page
        type: integer
      offset:
        description: Current offset
        type: integer
      total:
        description: Total number of items
        type: integer
    type: object
  api.RefreshRequest:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  api.RegisterRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        minLength: 8
        type: string
      roles:
        items:
          $ref: '#/definitions/models.Role'
        type: array
      username:
        maxLength: 50
        minLength: 3
        type: string
    required:
    - email
    - password
    - username
    type: object
  api.StackResponse:
    properties:
      containers:
        items:
          type: string
        type: array
      createdAt:
        type: string
      datacenter:
        type: string
      definitionPath:
        type: string
      deployedAt:
        type: string
      deployment:
        $ref: '#/definitions/models.DeploymentConfig'
      deploymentId:
        type: string
      description:
        type: string
      errorMessage:
        type: string
      id:
        type: string
      name:
        type: string
      owner:
        type: string
      status:
        type: string
      updatedAt:
        type: string
    type: object
  api.UpdateUserRequest:
    properties:
      email:
        type: string
      enabled:
        type: boolean
      name:
        type: string
      roles:
        items:
          $ref: '#/definitions/models.Role'
        type: array
    type: object
  api.UserResponse:
    properties:
      created_at:
        type: string
      email:
        type: string
      enabled:
        type: boolean
      id:
        type: string
      last_login_at:
        type: string
      name:
        type: string
      roles:
        items:
          $ref: '#/definitions/models.Role'
        type: array
      updated_at:
        type: string
      username:
        type: string
    type: object
  models.Container:
    properties:
      '@context':
        description: Context is the JSON-LD @context URL (typically https://schema.org)
        type: string
      '@id':
        description: ID is the unique container identifier (maps to CouchDB _id)
        type: string
      '@type':
        description: Type is the JSON-LD @type (SoftwareApplication for containers)
        type: string
      _rev:
        description: Rev is the CouchDB document revision for optimistic locking
        type: string
      dateCreated:
        description: Created is the ISO 8601 timestamp when the container was created
        type: string
      environment:
        additionalProperties:
          type: string
        description: Env contains environment variables passed to the container
        type: object
      executableName:
        description: Image is the container image name (executableName in Schema.org)
        type: string
      hostedOn:
        description: HostedOn is the ID of the host running this container (creates
          graph relationship)
        type: string
      name:
        description: Name is the human-readable container name (required, indexed)
        type: string
      ports:
        description: Ports are the network port mappings for this container
        items:
          $ref: '#/definitions/models.Port'
        type: array
      status:
        description: Status is the container runtime status (running, stopped, paused,
          etc.)
        type: string
    type: object
  models.ContainerPlacement:
    properties:
      containerId:
        description: ContainerID is the Docker container ID
        type: string
      containerName:
        description: ContainerName is the container name
        type: string
      hostId:
        description: HostID is the host where the container is running
        type: string
      ipAddress:
        description: IPAddress is the host IP address
        type: string
      ports:
        additionalProperties:
          type: integer
        description: Ports maps container ports to exposed host ports
        type: object
      startedAt:
        description: StartedAt is when the container started
        type: string
      status:
        description: Status is the container status
        type: string
    type: object
  models.DeploymentConfig:
    properties:
      hostConstraints:
        description: HostConstraints define placement rules per container
        items:
          $ref: '#/definitions/models.HostConstraint'
        type: array
      mode:
        description: 'Mode is the deployment mode: "single-host" or "multi-host"'
        type: string
      networkMode:
        description: |-
          NetworkMode defines cross-host networking
          Values: "host-port" (exposed ports), "overlay" (Docker overlay network)
        type: string
      placementStrategy:
        description: |-
          PlacementStrategy defines how containers are placed on hosts
          Values: "auto", "manual", "datacenter", "spread"
        type: string
    type: object
  models.Host:
    properties:
      '@context':
        description: Context is the JSON-LD @context URL (typically https://schema.org)
        type: string
      '@id':
        description: ID is the unique host identifier (maps to CouchDB _id)
        type: string
      '@type':
        description: Type is the JSON-LD @type (ComputerSystem for hosts)
        type: string
      _rev:
        description: Rev is the CouchDB document revision for optimistic locking
        type: string
      cpu:
        description: CPU is the number of CPU cores available
        type: integer
      ipAddress:
        description: IPAddress is the host's IP address (required, indexed)
        type: string
      location:
        description: Datacenter is the physical or logical location of the host
        type: string
      memory:
        description: Memory is the total memory in bytes
        type: integer
      name:
        description: Name is the human-readable host name (required, indexed)
        type: string
      status:
        description: Status is the host operational status (active, maintenance, offline)
        type: string
    type: object
  models.HostConstraint:
    properties:
      containerName:
        description: ContainerName is the name of the container to constrain
        type: string
      labels:
        additionalProperties:
          type: string
        description: Labels are custom labels that the host must have
        type: object
      minCpu:
        description: MinCPU is the minimum CPU cores required
        type: integer
      minMemory:
        description: MinMemory is the minimum memory in bytes required
        type: integer
      requiredDatacenter:
        description: RequiredDatacenter requires the container to be in this datacenter
        type: string
      targetHost:
        description: TargetHostID is the specific host ID (for manual placement)
        type: string
    type: object
  models.NetworkConfig:
    properties:
      environmentVariables:
        additionalProperties:
          additionalProperties:
            type: string
          type: object
        description: EnvironmentVariables contains injected environment variables
          for cross-host connections
        type: object
      mode:
        description: Mode is the networking mode (host-port or overlay)
        type: string
      overlayNetworkId:
        description: OverlayNetworkID is the Docker overlay network ID (if mode is
          overlay)
        type: string
      serviceEndpoints:
        additionalProperties:
          type: string
        description: |-
          ServiceEndpoints maps container names to their connection endpoints
          Format: {"postgres": "192.168.1.10:5432", "redis": "192.168.1.11:6379"}
        type: object
    type: object
  models.Port:
    properties:
      containerPort:
        description: ContainerPort is the port number inside the container
        type: integer
      hostPort:
        description: HostPort is the port number on the host machine
        type: integer
      protocol:
        description: Protocol is the network protocol (tcp, udp, sctp)
        type: string
    type: object
  models.Role:
    enum:
    - admin
    - user
    - viewer
    - agent
    type: string
    x-enum-varnames:
    - RoleAdmin
    - RoleUser
    - RoleViewer
    - RoleAgent
info:
  contact: {}
paths:
  /api/v1/stacks:
    get:
      consumes:
      - application/json
      description: List all stacks with optional status and datacenter filters
      parameters:
      - description: Filter by status
        in: query
        name: status
        type: string
      - description: Filter by datacenter
        in: query
        name: datacenter
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.StackResponse'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: List stacks
      tags:
      - stacks
    post:
      consumes:
      - application/json
      description: Deploy a multi-container stack across multiple Docker hosts
      parameters:
      - description: Stack deployment configuration
        in: body
        name: stack
        required: true
        schema:
          $ref: '#/definitions/api.DeployStackRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/api.DeploymentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Deploy a new stack
      tags:
      - stacks
  /api/v1/stacks/{id}:
    delete:
      consumes:
      - application/json
      description: Remove a stack and all its containers
      parameters:
      - description: Stack ID
        in: path
        name: id
        required: true
        type: string
      - default: false
        description: Remove volumes
        in: query
        name: removeVolumes
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Remove stack
      tags:
      - stacks
    get:
      consumes:
      - application/json
      description: Get detailed information about a specific stack
      parameters:
      - description: Stack ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.StackResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get stack by ID
      tags:
      - stacks
  /api/v1/stacks/{id}/deployment:
    get:
      consumes:
      - application/json
      description: Get detailed deployment information including container placements
      parameters:
      - description: Stack ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.DeploymentResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get stack deployment
      tags:
      - stacks
  /api/v1/stacks/{id}/stop:
    post:
      consumes:
      - application/json
      description: Stop all containers in a stack
      parameters:
      - description: Stack ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Stop stack
      tags:
      - stacks
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user with username and password, returns JWT tokens
      parameters:
      - description: Login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/api.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully logged in
          schema:
            $ref: '#/definitions/api.LoginResponse'
        "400":
          description: Bad request - Invalid credentials format
          schema:
            $ref: '#/definitions/api.APIError'
        "401":
          description: Unauthorized - Invalid username or password
          schema:
            $ref: '#/definitions/api.APIError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/api.APIError'
      summary: User login
      tags:
      - Authentication
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Revoke refresh token and logout user
      produces:
      - application/json
      responses:
        "200":
          description: Successfully logged out
          schema:
            $ref: '#/definitions/api.MessageResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.APIError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/api.APIError'
      security:
      - BearerAuth: []
      summary: Logout user
      tags:
      - Authentication
  /auth/me:
    get:
      consumes:
      - application/json
      description: Get information about the currently authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: Current user information
          schema:
            $ref: '#/definitions/api.UserResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.APIError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/api.APIError'
      security:
      - BearerAuth: []
      summary: Get current user
      tags:
      - Authentication
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Get a new access token using a refresh token
      parameters:
      - description: Refresh token
        in: body
        name: refresh
        required: true
        schema:
          $ref: '#/definitions/api.RefreshRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully refreshed token
          schema:
            $ref: '#/definitions/api.LoginResponse'
        "400":
          description: Bad request - Invalid refresh token format
          schema:
            $ref: '#/definitions/api.APIError'
        "401":
          description: Unauthorized - Invalid or expired refresh token
          schema:
            $ref: '#/definitions/api.APIError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/api.APIError'
      summary: Refresh access token
      tags:
      - Authentication
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user account (admin only)
      parameters:
      - description: User registration data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/api.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created user
          schema:
            $ref: '#/definitions/api.UserResponse'
        "400":
          description: Bad request - Invalid data or validation errors
          schema:
            $ref: '#/definitions/api.APIError'
        "409":
          description: Conflict - Username or email already exists
          schema:
            $ref: '#/definitions/api.APIError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/api.APIError'
      security:
      - BearerAuth: []
      summary: Register new user
      tags:
      - Authentication
  /containers:
    get:
      consumes:
      - application/json
      description: Get a paginated list of containers with optional filtering by status,
        host, or datacenter
      parameters:
      - description: Filter by container status (running, stopped, paused, etc.)
        in: query
        name: status
        type: string
      - description: Filter by host ID
        in: query
        name: host
        type: string
      - description: Filter by datacenter location
        in: query
        name: datacenter
        type: string
      - description: 'Maximum number of items to return (default: 100, max: 1000)'
        in: query
        maximum: 1000
        minimum: 1
        name: limit
        type: integer
      - description: 'Number of items to skip (default: 0)'
        in: query
        minimum: 0
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved containers
          schema:
            $ref: '#/definitions/api.PaginatedContainersResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: List containers
      tags:
      - Containers
    post:
      consumes:
      - application/json
      description: Create a new container with the provided JSON-LD data
      parameters:
      - description: Container object (JSON-LD format)
        in: body
        name: container
        required: true
        schema:
          $ref: '#/definitions/models.Container'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created container
          schema:
            $ref: '#/definitions/models.Container'
        "400":
          description: Bad request - Invalid request body or validation errors
          schema:
            $ref: '#/definitions/api.APIError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/api.APIError'
      summary: Create a new container
      tags:
      - Containers
  /containers/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an existing container by its ID
      parameters:
      - description: Container ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully deleted container
          schema:
            $ref: '#/definitions/api.MessageResponse'
        "400":
          description: Bad request - Container ID is required
          schema:
            $ref: '#/definitions/api.APIError'
        "404":
          description: Container not found
          schema:
            $ref: '#/definitions/api.APIError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/api.APIError'
      summary: Delete a container
      tags:
      - Containers
    get:
      consumes:
      - application/json
      description: Get detailed information about a specific container by its ID
      parameters:
      - description: Container ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved container
          schema:
            $ref: '#/definitions/models.Container'
        "400":
          description: Bad request - Container ID is required
          schema:
            $ref: '#/definitions/api.APIError'
        "404":
          description: Container not found
          schema:
            $ref: '#/definitions/api.APIError'
      summary: Get container by ID
      tags:
      - Containers
    put:
      consumes:
      - application/json
      description: Update an existing container with new JSON-LD data
      parameters:
      - description: Container ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated container object (JSON-LD format)
        in: body
        name: container
        required: true
        schema:
          $ref: '#/definitions/models.Container'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated container
          schema:
            $ref: '#/definitions/models.Container'
        "400":
          description: Bad request - Invalid request body or validation errors
          schema:
            $ref: '#/definitions/api.APIError'
        "404":
          description: Container not found
          schema:
            $ref: '#/definitions/api.APIError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/api.APIError'
      summary: Update a container
      tags:
      - Containers
  /containers/{id}/logs:
    get:
      consumes:
      - application/json
      description: Get logs from a container via the agent's Docker socket
      parameters:
      - description: Container ID
        in: path
        name: id
        required: true
        type: string
      - default: 100
        description: Number of lines
        in: query
        name: lines
        type: integer
      - default: false
        description: Stream logs
        in: query
        name: follow
        type: boolean
      - default: true
        description: Include timestamps
        in: query
        name: timestamps
        type: boolean
      - default: '"100"'
        description: Lines from end
        in: query
        name: tail
        type: string
      produces:
      - text/plain
      responses:
        "200":
          description: Container logs
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get container logs
      tags:
      - containers
  /containers/bulk:
    post:
      consumes:
      - application/json
      description: Create multiple containers in a single request
      parameters:
      - description: Array of container objects (JSON-LD format)
        in: body
        name: containers
        required: true
        schema:
          items:
            $ref: '#/definitions/models.Container'
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: Successfully created containers
          schema:
            $ref: '#/definitions/api.BulkResponse'
        "400":
          description: Bad request - Invalid request body or validation errors
          schema:
            $ref: '#/definitions/api.APIError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/api.APIError'
      summary: Bulk create containers
      tags:
      - Containers
  /graph:
    get:
      consumes:
      - application/json
      description: Get graph visualization data with nodes and edges
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.GraphData'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get graph data
      tags:
      - Graph
  /graph/layout:
    get:
      consumes:
      - application/json
      description: Get graph visualization data with specified layout algorithm applied
      parameters:
      - description: Layout algorithm
        enum:
        - force
        - hierarchical
        - circle
        - grid
        in: query
        name: layout
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.GraphData'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get graph layout
      tags:
      - Graph
  /graph/stats:
    get:
      consumes:
      - application/json
      description: Get statistics about graph nodes and edges
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get graph stats
      tags:
      - Graph
  /hosts:
    get:
      consumes:
      - application/json
      description: Get a paginated list of hosts with optional filtering by status
        and datacenter
      parameters:
      - default: 10
        description: Maximum number of items to return
        in: query
        name: limit
        type: integer
      - default: 0
        description: Number of items to skip
        in: query
        name: offset
        type: integer
      - description: Filter by host status
        in: query
        name: status
        type: string
      - description: Filter by datacenter location
        in: query
        name: datacenter
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.PaginatedHostsResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: List hosts
      tags:
      - Hosts
    post:
      consumes:
      - application/json
      description: Create a new host with the provided information. ID will be auto-generated
        if not provided.
      parameters:
      - description: Host object to create
        in: body
        name: host
        required: true
        schema:
          $ref: '#/definitions/models.Host'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Host'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Create a new host
      tags:
      - Hosts
  /hosts/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a host by its ID. This operation broadcasts a WebSocket
        event.
      parameters:
      - description: Host ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Delete a host
      tags:
      - Hosts
    get:
      consumes:
      - application/json
      description: Retrieve detailed information about a specific host
      parameters:
      - description: Host ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Host'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get a host by ID
      tags:
      - Hosts
    put:
      consumes:
      - application/json
      description: Update an existing host with new information. ID and revision are
        preserved.
      parameters:
      - description: Host ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated host object
        in: body
        name: host
        required: true
        schema:
          $ref: '#/definitions/models.Host'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Host'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Update a host
      tags:
      - Hosts
  /hosts/bulk:
    post:
      consumes:
      - application/json
      description: Create multiple hosts in a single request. Returns success/failure
        counts and detailed results.
      parameters:
      - description: Array of host objects to create
        in: body
        name: hosts
        required: true
        schema:
          items:
            $ref: '#/definitions/models.Host'
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.BulkResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Bulk create hosts
      tags:
      - Hosts
  /stats:
    get:
      consumes:
      - application/json
      description: Get overall system statistics including container and host counts
      produces:
      - application/json
      responses:
        "200":
          description: Statistics with container and host information
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get overall statistics
      tags:
      - Statistics
  /stats/containers/count:
    get:
      consumes:
      - application/json
      description: Get the count of containers with optional filters
      parameters:
      - description: Filter by container status
        in: query
        name: status
        type: string
      - description: Filter by host
        in: query
        name: host
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Container count with applied filters
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get container count
      tags:
      - Statistics
  /stats/distribution:
    get:
      consumes:
      - application/json
      description: Get the distribution of containers across hosts with statistics
      produces:
      - application/json
      responses:
        "200":
          description: Container distribution with min, max, and average containers
            per host
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get host container distribution
      tags:
      - Statistics
  /stats/hosts/count:
    get:
      consumes:
      - application/json
      description: Get the count of hosts with optional filters
      parameters:
      - description: Filter by host status
        in: query
        name: status
        type: string
      - description: Filter by datacenter location
        in: query
        name: datacenter
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Host count with applied filters
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get host count
      tags:
      - Statistics
  /users:
    get:
      consumes:
      - application/json
      description: Get a list of all users (admin only)
      produces:
      - application/json
      responses:
        "200":
          description: List of users
          schema:
            items:
              $ref: '#/definitions/api.UserResponse'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.APIError'
        "403":
          description: Forbidden - Admin access required
          schema:
            $ref: '#/definitions/api.APIError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/api.APIError'
      security:
      - BearerAuth: []
      summary: List all users
      tags:
      - Users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user (admin only)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully deleted
          schema:
            $ref: '#/definitions/api.MessageResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.APIError'
        "403":
          description: Forbidden - Admin access required
          schema:
            $ref: '#/definitions/api.APIError'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/api.APIError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/api.APIError'
      security:
      - BearerAuth: []
      summary: Delete user
      tags:
      - Users
    get:
      consumes:
      - application/json
      description: Get a user by their ID (admin only)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User information
          schema:
            $ref: '#/definitions/api.UserResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.APIError'
        "403":
          description: Forbidden - Admin access required
          schema:
            $ref: '#/definitions/api.APIError'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/api.APIError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/api.APIError'
      security:
      - BearerAuth: []
      summary: Get user by ID
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Update a user's information (admin only)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User update data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/api.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Updated user
          schema:
            $ref: '#/definitions/api.UserResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/api.APIError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.APIError'
        "403":
          description: Forbidden - Admin access required
          schema:
            $ref: '#/definitions/api.APIError'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/api.APIError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/api.APIError'
      security:
      - BearerAuth: []
      summary: Update user
      tags:
      - Users
  /users/api-keys:
    post:
      consumes:
      - application/json
      description: Generate a new API key for the current user
      produces:
      - application/json
      responses:
        "200":
          description: API key generated
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.APIError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/api.APIError'
      security:
      - BearerAuth: []
      summary: Generate API key
      tags:
      - Users
  /users/api-keys/{index}:
    delete:
      consumes:
      - application/json
      description: Revoke an API key by its index
      parameters:
      - description: API key index
        in: path
        name: index
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: API key revoked
          schema:
            $ref: '#/definitions/api.MessageResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/api.APIError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.APIError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/api.APIError'
      security:
      - BearerAuth: []
      summary: Revoke API key
      tags:
      - Users
  /users/password:
    post:
      consumes:
      - application/json
      description: Change current user's password
      parameters:
      - description: Password change data
        in: body
        name: password
        required: true
        schema:
          $ref: '#/definitions/api.ChangePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Password changed successfully
          schema:
            $ref: '#/definitions/api.MessageResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/api.APIError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.APIError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/api.APIError'
      security:
      - BearerAuth: []
      summary: Change password
      tags:
      - Users
  /ws/graph:
    get:
      consumes:
      - application/json
      description: Establishes a WebSocket connection for receiving real-time graph
        events
      produces:
      - application/json
      responses:
        "101":
          description: Switching Protocols
          schema:
            type: string
      summary: WebSocket endpoint for real-time graph updates
      tags:
      - websocket
  /ws/stats:
    get:
      description: Returns statistics about WebSocket connections
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Get WebSocket statistics
      tags:
      - websocket
swagger: "2.0"
