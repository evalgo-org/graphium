{
    "schemes": [
        "http",
        "https"
    ],
    "swagger": "2.0",
    "info": {
        "description": "Graphium is a semantic container orchestration platform that uses knowledge graphs and JSON-LD to manage multi-host Docker infrastructure with intelligent querying, graph traversal, and real-time insights.\n\n## Features\n- JSON-LD/Schema.org semantic models\n- REST API for container and host management\n- Graph visualization and traversal\n- Real-time Docker agent integration\n- WebSocket support for live updates\n\n## Authentication\nCurrently, the API does not require authentication. Authentication will be added in Phase 12.",
        "title": "Graphium API",
        "contact": {
            "name": "Graphium API Support",
            "url": "https://github.com/[org]/graphium",
            "email": "support@graphium.io"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "0.1.0"
    },
    "host": "localhost:8095",
    "basePath": "/api/v1",
    "paths": {
        "/containers": {
            "get": {
                "description": "Get a paginated list of containers with optional filtering by status, host, or datacenter",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Containers"
                ],
                "summary": "List containers",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by container status (running, stopped, paused, etc.)",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by host ID",
                        "name": "host",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by datacenter location",
                        "name": "datacenter",
                        "in": "query"
                    },
                    {
                        "maximum": 1000,
                        "minimum": 1,
                        "type": "integer",
                        "description": "Maximum number of items to return (default: 100, max: 1000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "description": "Number of items to skip (default: 0)",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved containers",
                        "schema": {
                            "$ref": "#/definitions/api.PaginatedContainersResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new container with the provided JSON-LD data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Containers"
                ],
                "summary": "Create a new container",
                "parameters": [
                    {
                        "description": "Container object (JSON-LD format)",
                        "name": "container",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Container"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created container",
                        "schema": {
                            "$ref": "#/definitions/models.Container"
                        }
                    },
                    "400": {
                        "description": "Bad request - Invalid request body or validation errors",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    }
                }
            }
        },
        "/containers/{id}": {
            "get": {
                "description": "Get detailed information about a specific container by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Containers"
                ],
                "summary": "Get container by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Container ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved container",
                        "schema": {
                            "$ref": "#/definitions/models.Container"
                        }
                    },
                    "400": {
                        "description": "Bad request - Container ID is required",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "404": {
                        "description": "Container not found",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    }
                }
            },
            "put": {
                "description": "Update an existing container with new JSON-LD data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Containers"
                ],
                "summary": "Update a container",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Container ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated container object (JSON-LD format)",
                        "name": "container",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Container"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated container",
                        "schema": {
                            "$ref": "#/definitions/models.Container"
                        }
                    },
                    "400": {
                        "description": "Bad request - Invalid request body or validation errors",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "404": {
                        "description": "Container not found",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    }
                }
            }
        },
        "/graph": {
            "get": {
                "description": "Returns nodes and edges for graph visualization",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "graph"
                ],
                "summary": "Get graph visualization data",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.GraphData"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/graph/layout": {
            "get": {
                "description": "Returns graph data with layout coordinates",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "graph"
                ],
                "summary": "Get graph with layout",
                "parameters": [
                    {
                        "enum": [
                            "force",
                            "hierarchical",
                            "circle",
                            "grid"
                        ],
                        "type": "string",
                        "description": "Layout algorithm",
                        "name": "layout",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.GraphData"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/graph/stats": {
            "get": {
                "description": "Returns statistics about nodes and edges",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "graph"
                ],
                "summary": "Get graph statistics",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/ws/graph": {
            "get": {
                "description": "Establishes a WebSocket connection for receiving real-time graph events",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "websocket"
                ],
                "summary": "WebSocket endpoint for real-time graph updates",
                "responses": {
                    "101": {
                        "description": "Switching Protocols",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/ws/stats": {
            "get": {
                "description": "Returns statistics about WebSocket connections",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "websocket"
                ],
                "summary": "Get WebSocket statistics",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "api.APIError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "context": {
                    "type": "object",
                    "additionalProperties": true
                },
                "details": {
                    "type": "string"
                },
                "field_errors": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "api.ErrorResponse": {
            "type": "object",
            "properties": {
                "details": {
                    "type": "string"
                },
                "error": {
                    "type": "string"
                }
            }
        },
        "api.GraphData": {
            "type": "object",
            "properties": {
                "edges": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.GraphEdge"
                    }
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.GraphNode"
                    }
                }
            }
        },
        "api.GraphEdge": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/api.GraphEdgeData"
                }
            }
        },
        "api.GraphEdgeData": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "label": {
                    "type": "string"
                },
                "source": {
                    "type": "string"
                },
                "target": {
                    "type": "string"
                },
                "type": {
                    "description": "\"hosted_on\", \"connects_to\", \"depends_on\"",
                    "type": "string"
                }
            }
        },
        "api.GraphNode": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/api.GraphNodeData"
                }
            }
        },
        "api.GraphNodeData": {
            "type": "object",
            "properties": {
                "cpu": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                },
                "ip": {
                    "type": "string"
                },
                "label": {
                    "type": "string"
                },
                "location": {
                    "type": "string"
                },
                "memory": {
                    "type": "integer"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "status": {
                    "type": "string"
                },
                "type": {
                    "description": "\"host\", \"container\"",
                    "type": "string"
                }
            }
        },
        "api.PaginatedContainersResponse": {
            "type": "object",
            "properties": {
                "containers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Container"
                    }
                },
                "count": {
                    "description": "Number of items in current page",
                    "type": "integer"
                },
                "limit": {
                    "description": "Items per page",
                    "type": "integer"
                },
                "offset": {
                    "description": "Current offset",
                    "type": "integer"
                },
                "total": {
                    "description": "Total number of items",
                    "type": "integer"
                }
            }
        },
        "models.Container": {
            "type": "object",
            "properties": {
                "@context": {
                    "description": "Context is the JSON-LD @context URL (typically https://schema.org)",
                    "type": "string"
                },
                "@id": {
                    "description": "ID is the unique container identifier (maps to CouchDB _id)",
                    "type": "string"
                },
                "@type": {
                    "description": "Type is the JSON-LD @type (SoftwareApplication for containers)",
                    "type": "string"
                },
                "_rev": {
                    "description": "Rev is the CouchDB document revision for optimistic locking",
                    "type": "string"
                },
                "dateCreated": {
                    "description": "Created is the ISO 8601 timestamp when the container was created",
                    "type": "string"
                },
                "environment": {
                    "description": "Env contains environment variables passed to the container",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "executableName": {
                    "description": "Image is the container image name (executableName in Schema.org)",
                    "type": "string"
                },
                "hostedOn": {
                    "description": "HostedOn is the ID of the host running this container (creates graph relationship)",
                    "type": "string"
                },
                "name": {
                    "description": "Name is the human-readable container name (required, indexed)",
                    "type": "string"
                },
                "ports": {
                    "description": "Ports are the network port mappings for this container",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Port"
                    }
                },
                "status": {
                    "description": "Status is the container runtime status (running, stopped, paused, etc.)",
                    "type": "string"
                }
            }
        },
        "models.Port": {
            "type": "object",
            "properties": {
                "containerPort": {
                    "description": "ContainerPort is the port number inside the container",
                    "type": "integer"
                },
                "hostPort": {
                    "description": "HostPort is the port number on the host machine",
                    "type": "integer"
                },
                "protocol": {
                    "description": "Protocol is the network protocol (tcp, udp, sctp)",
                    "type": "string"
                }
            }
        }
    },
    "tags": [
        {
            "description": "Operations related to container management",
            "name": "Containers"
        },
        {
            "description": "Operations related to host management",
            "name": "Hosts"
        },
        {
            "description": "Graph query and traversal operations",
            "name": "Queries"
        },
        {
            "description": "Statistics and metrics endpoints",
            "name": "Statistics"
        },
        {
            "description": "Graph visualization endpoints",
            "name": "Graph"
        },
        {
            "description": "WebSocket endpoints for real-time updates",
            "name": "WebSocket"
        }
    ]
}