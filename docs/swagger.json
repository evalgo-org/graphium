{
    "swagger": "2.0",
    "info": {
        "contact": {}
    },
    "paths": {
        "/api/v1/stacks": {
            "get": {
                "description": "List all stacks with optional status and datacenter filters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "stacks"
                ],
                "summary": "List stacks",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by datacenter",
                        "name": "datacenter",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/api.StackResponse"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Deploy a multi-container stack across multiple Docker hosts",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "stacks"
                ],
                "summary": "Deploy a new stack",
                "parameters": [
                    {
                        "description": "Stack deployment configuration",
                        "name": "stack",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.DeployStackRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/api.DeploymentResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/stacks/{id}": {
            "get": {
                "description": "Get detailed information about a specific stack",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "stacks"
                ],
                "summary": "Get stack by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Stack ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.StackResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Remove a stack and all its containers",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "stacks"
                ],
                "summary": "Remove stack",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Stack ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "default": false,
                        "description": "Remove volumes",
                        "name": "removeVolumes",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/stacks/{id}/deployment": {
            "get": {
                "description": "Get detailed deployment information including container placements",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "stacks"
                ],
                "summary": "Get stack deployment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Stack ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.DeploymentResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/stacks/{id}/stop": {
            "post": {
                "description": "Stop all containers in a stack",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "stacks"
                ],
                "summary": "Stop stack",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Stack ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "description": "Authenticate user with username and password, returns JWT tokens",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "User login",
                "parameters": [
                    {
                        "description": "Login credentials",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully logged in",
                        "schema": {
                            "$ref": "#/definitions/api.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - Invalid credentials format",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid username or password",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    }
                }
            }
        },
        "/auth/logout": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Revoke refresh token and logout user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Logout user",
                "responses": {
                    "200": {
                        "description": "Successfully logged out",
                        "schema": {
                            "$ref": "#/definitions/api.MessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    }
                }
            }
        },
        "/auth/me": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get information about the currently authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Get current user",
                "responses": {
                    "200": {
                        "description": "Current user information",
                        "schema": {
                            "$ref": "#/definitions/api.UserResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    }
                }
            }
        },
        "/auth/refresh": {
            "post": {
                "description": "Get a new access token using a refresh token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Refresh access token",
                "parameters": [
                    {
                        "description": "Refresh token",
                        "name": "refresh",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.RefreshRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully refreshed token",
                        "schema": {
                            "$ref": "#/definitions/api.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - Invalid refresh token format",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or expired refresh token",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Register a new user account (admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Register new user",
                "parameters": [
                    {
                        "description": "User registration data",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created user",
                        "schema": {
                            "$ref": "#/definitions/api.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - Invalid data or validation errors",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "409": {
                        "description": "Conflict - Username or email already exists",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    }
                }
            }
        },
        "/containers": {
            "get": {
                "description": "Get a paginated list of containers with optional filtering by status, host, or datacenter",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Containers"
                ],
                "summary": "List containers",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by container status (running, stopped, paused, etc.)",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by host ID",
                        "name": "host",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by datacenter location",
                        "name": "datacenter",
                        "in": "query"
                    },
                    {
                        "maximum": 1000,
                        "minimum": 1,
                        "type": "integer",
                        "description": "Maximum number of items to return (default: 100, max: 1000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "description": "Number of items to skip (default: 0)",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved containers",
                        "schema": {
                            "$ref": "#/definitions/api.PaginatedContainersResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new container with the provided JSON-LD data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Containers"
                ],
                "summary": "Create a new container",
                "parameters": [
                    {
                        "description": "Container object (JSON-LD format)",
                        "name": "container",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Container"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created container",
                        "schema": {
                            "$ref": "#/definitions/models.Container"
                        }
                    },
                    "400": {
                        "description": "Bad request - Invalid request body or validation errors",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    }
                }
            }
        },
        "/containers/bulk": {
            "post": {
                "description": "Create multiple containers in a single request",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Containers"
                ],
                "summary": "Bulk create containers",
                "parameters": [
                    {
                        "description": "Array of container objects (JSON-LD format)",
                        "name": "containers",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Container"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully created containers",
                        "schema": {
                            "$ref": "#/definitions/api.BulkResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - Invalid request body or validation errors",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    }
                }
            }
        },
        "/containers/{id}": {
            "get": {
                "description": "Get detailed information about a specific container by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Containers"
                ],
                "summary": "Get container by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Container ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved container",
                        "schema": {
                            "$ref": "#/definitions/models.Container"
                        }
                    },
                    "400": {
                        "description": "Bad request - Container ID is required",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "404": {
                        "description": "Container not found",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    }
                }
            },
            "put": {
                "description": "Update an existing container with new JSON-LD data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Containers"
                ],
                "summary": "Update a container",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Container ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated container object (JSON-LD format)",
                        "name": "container",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Container"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated container",
                        "schema": {
                            "$ref": "#/definitions/models.Container"
                        }
                    },
                    "400": {
                        "description": "Bad request - Invalid request body or validation errors",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "404": {
                        "description": "Container not found",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete an existing container by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Containers"
                ],
                "summary": "Delete a container",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Container ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully deleted container",
                        "schema": {
                            "$ref": "#/definitions/api.MessageResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - Container ID is required",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "404": {
                        "description": "Container not found",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    }
                }
            }
        },
        "/containers/{id}/logs": {
            "get": {
                "description": "Get logs from a container via the agent's Docker socket",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "containers"
                ],
                "summary": "Get container logs",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Container ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 100,
                        "description": "Number of lines",
                        "name": "lines",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "default": false,
                        "description": "Stream logs",
                        "name": "follow",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "default": true,
                        "description": "Include timestamps",
                        "name": "timestamps",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "\"100\"",
                        "description": "Lines from end",
                        "name": "tail",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Container logs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/graph": {
            "get": {
                "description": "Get graph visualization data with nodes and edges",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Graph"
                ],
                "summary": "Get graph data",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.GraphData"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/graph/layout": {
            "get": {
                "description": "Get graph visualization data with specified layout algorithm applied",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Graph"
                ],
                "summary": "Get graph layout",
                "parameters": [
                    {
                        "enum": [
                            "force",
                            "hierarchical",
                            "circle",
                            "grid"
                        ],
                        "type": "string",
                        "description": "Layout algorithm",
                        "name": "layout",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.GraphData"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/graph/stats": {
            "get": {
                "description": "Get statistics about graph nodes and edges",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Graph"
                ],
                "summary": "Get graph stats",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/hosts": {
            "get": {
                "description": "Get a paginated list of hosts with optional filtering by status and datacenter",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Hosts"
                ],
                "summary": "List hosts",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Maximum number of items to return",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "Number of items to skip",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by host status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by datacenter location",
                        "name": "datacenter",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.PaginatedHostsResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new host with the provided information. ID will be auto-generated if not provided.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Hosts"
                ],
                "summary": "Create a new host",
                "parameters": [
                    {
                        "description": "Host object to create",
                        "name": "host",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Host"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.Host"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/hosts/bulk": {
            "post": {
                "description": "Create multiple hosts in a single request. Returns success/failure counts and detailed results.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Hosts"
                ],
                "summary": "Bulk create hosts",
                "parameters": [
                    {
                        "description": "Array of host objects to create",
                        "name": "hosts",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Host"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.BulkResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/hosts/{id}": {
            "get": {
                "description": "Retrieve detailed information about a specific host",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Hosts"
                ],
                "summary": "Get a host by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Host ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Host"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Update an existing host with new information. ID and revision are preserved.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Hosts"
                ],
                "summary": "Update a host",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Host ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated host object",
                        "name": "host",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Host"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Host"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a host by its ID. This operation broadcasts a WebSocket event.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Hosts"
                ],
                "summary": "Delete a host",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Host ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.MessageResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/stats": {
            "get": {
                "description": "Get overall system statistics including container and host counts",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Statistics"
                ],
                "summary": "Get overall statistics",
                "responses": {
                    "200": {
                        "description": "Statistics with container and host information",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/stats/containers/count": {
            "get": {
                "description": "Get the count of containers with optional filters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Statistics"
                ],
                "summary": "Get container count",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by container status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by host",
                        "name": "host",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Container count with applied filters",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/stats/distribution": {
            "get": {
                "description": "Get the distribution of containers across hosts with statistics",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Statistics"
                ],
                "summary": "Get host container distribution",
                "responses": {
                    "200": {
                        "description": "Container distribution with min, max, and average containers per host",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/stats/hosts/count": {
            "get": {
                "description": "Get the count of hosts with optional filters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Statistics"
                ],
                "summary": "Get host count",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by host status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by datacenter location",
                        "name": "datacenter",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Host count with applied filters",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a list of all users (admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "List all users",
                "responses": {
                    "200": {
                        "description": "List of users",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/api.UserResponse"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "403": {
                        "description": "Forbidden - Admin access required",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    }
                }
            }
        },
        "/users/api-keys": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Generate a new API key for the current user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Generate API key",
                "responses": {
                    "200": {
                        "description": "API key generated",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    }
                }
            }
        },
        "/users/api-keys/{index}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Revoke an API key by its index",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Revoke API key",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "API key index",
                        "name": "index",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "API key revoked",
                        "schema": {
                            "$ref": "#/definitions/api.MessageResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    }
                }
            }
        },
        "/users/password": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Change current user's password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Change password",
                "parameters": [
                    {
                        "description": "Password change data",
                        "name": "password",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.ChangePasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password changed successfully",
                        "schema": {
                            "$ref": "#/definitions/api.MessageResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a user by their ID (admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get user by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User information",
                        "schema": {
                            "$ref": "#/definitions/api.UserResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "403": {
                        "description": "Forbidden - Admin access required",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update a user's information (admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Update user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User update data",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.UpdateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated user",
                        "schema": {
                            "$ref": "#/definitions/api.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "403": {
                        "description": "Forbidden - Admin access required",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a user (admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Delete user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully deleted",
                        "schema": {
                            "$ref": "#/definitions/api.MessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "403": {
                        "description": "Forbidden - Admin access required",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    }
                }
            }
        },
        "/ws/graph": {
            "get": {
                "description": "Establishes a WebSocket connection for receiving real-time graph events",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "websocket"
                ],
                "summary": "WebSocket endpoint for real-time graph updates",
                "responses": {
                    "101": {
                        "description": "Switching Protocols",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/ws/stats": {
            "get": {
                "description": "Returns statistics about WebSocket connections",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "websocket"
                ],
                "summary": "Get WebSocket statistics",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "api.APIError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "context": {
                    "type": "object",
                    "additionalProperties": true
                },
                "details": {
                    "type": "string"
                },
                "field_errors": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "api.BulkResponse": {
            "type": "object",
            "properties": {
                "failed": {
                    "type": "integer"
                },
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.BulkResult"
                    }
                },
                "success": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "api.BulkResult": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "reason": {
                    "type": "string"
                },
                "rev": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "api.ChangePasswordRequest": {
            "type": "object",
            "required": [
                "current_password",
                "new_password"
            ],
            "properties": {
                "current_password": {
                    "type": "string"
                },
                "new_password": {
                    "type": "string",
                    "minLength": 8
                }
            }
        },
        "api.DeployStackRequest": {
            "type": "object",
            "required": [
                "definitionPath",
                "name",
                "placementStrategy"
            ],
            "properties": {
                "datacenter": {
                    "type": "string"
                },
                "definitionPath": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "hostConstraints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.HostConstraint"
                    }
                },
                "name": {
                    "type": "string"
                },
                "networkMode": {
                    "type": "string",
                    "enum": [
                        "host-port",
                        "overlay"
                    ]
                },
                "placementStrategy": {
                    "type": "string",
                    "enum": [
                        "auto",
                        "manual",
                        "spread",
                        "datacenter"
                    ]
                },
                "targetHosts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "api.DeploymentResponse": {
            "type": "object",
            "properties": {
                "completedAt": {
                    "type": "string"
                },
                "errorMessage": {
                    "type": "string"
                },
                "networkConfig": {
                    "$ref": "#/definitions/models.NetworkConfig"
                },
                "placements": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/models.ContainerPlacement"
                    }
                },
                "stackId": {
                    "type": "string"
                },
                "startedAt": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "api.ErrorResponse": {
            "type": "object",
            "properties": {
                "details": {
                    "type": "string"
                },
                "error": {
                    "type": "string"
                }
            }
        },
        "api.GraphData": {
            "type": "object",
            "properties": {
                "edges": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.GraphEdge"
                    }
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.GraphNode"
                    }
                }
            }
        },
        "api.GraphEdge": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/api.GraphEdgeData"
                }
            }
        },
        "api.GraphEdgeData": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "label": {
                    "type": "string"
                },
                "source": {
                    "type": "string"
                },
                "target": {
                    "type": "string"
                },
                "type": {
                    "description": "\"hosted_on\", \"connects_to\", \"depends_on\"",
                    "type": "string"
                }
            }
        },
        "api.GraphNode": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/api.GraphNodeData"
                }
            }
        },
        "api.GraphNodeData": {
            "type": "object",
            "properties": {
                "cpu": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                },
                "ip": {
                    "type": "string"
                },
                "label": {
                    "type": "string"
                },
                "location": {
                    "type": "string"
                },
                "memory": {
                    "type": "integer"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "status": {
                    "type": "string"
                },
                "type": {
                    "description": "\"host\", \"container\"",
                    "type": "string"
                }
            }
        },
        "api.LoginRequest": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "api.LoginResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "expires_at": {
                    "type": "string"
                },
                "refresh_token": {
                    "type": "string"
                },
                "token_type": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/api.UserResponse"
                }
            }
        },
        "api.MessageResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "api.PaginatedContainersResponse": {
            "type": "object",
            "properties": {
                "containers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Container"
                    }
                },
                "count": {
                    "description": "Number of items in current page",
                    "type": "integer"
                },
                "limit": {
                    "description": "Items per page",
                    "type": "integer"
                },
                "offset": {
                    "description": "Current offset",
                    "type": "integer"
                },
                "total": {
                    "description": "Total number of items",
                    "type": "integer"
                }
            }
        },
        "api.PaginatedHostsResponse": {
            "type": "object",
            "properties": {
                "count": {
                    "description": "Number of items in current page",
                    "type": "integer"
                },
                "hosts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Host"
                    }
                },
                "limit": {
                    "description": "Items per page",
                    "type": "integer"
                },
                "offset": {
                    "description": "Current offset",
                    "type": "integer"
                },
                "total": {
                    "description": "Total number of items",
                    "type": "integer"
                }
            }
        },
        "api.RefreshRequest": {
            "type": "object",
            "required": [
                "refresh_token"
            ],
            "properties": {
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "api.RegisterRequest": {
            "type": "object",
            "required": [
                "email",
                "password",
                "username"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "minLength": 8
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Role"
                    }
                },
                "username": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 3
                }
            }
        },
        "api.StackResponse": {
            "type": "object",
            "properties": {
                "containers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "createdAt": {
                    "type": "string"
                },
                "datacenter": {
                    "type": "string"
                },
                "definitionPath": {
                    "type": "string"
                },
                "deployedAt": {
                    "type": "string"
                },
                "deployment": {
                    "$ref": "#/definitions/models.DeploymentConfig"
                },
                "deploymentId": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "errorMessage": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "api.UpdateUserRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Role"
                    }
                }
            }
        },
        "api.UserResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "last_login_at": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Role"
                    }
                },
                "updated_at": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "models.Container": {
            "type": "object",
            "properties": {
                "@context": {
                    "description": "Context is the JSON-LD @context URL (typically https://schema.org)",
                    "type": "string"
                },
                "@id": {
                    "description": "ID is the unique container identifier (maps to CouchDB _id)",
                    "type": "string"
                },
                "@type": {
                    "description": "Type is the JSON-LD @type (SoftwareApplication for containers)",
                    "type": "string"
                },
                "_rev": {
                    "description": "Rev is the CouchDB document revision for optimistic locking",
                    "type": "string"
                },
                "dateCreated": {
                    "description": "Created is the ISO 8601 timestamp when the container was created",
                    "type": "string"
                },
                "environment": {
                    "description": "Env contains environment variables passed to the container",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "executableName": {
                    "description": "Image is the container image name (executableName in Schema.org)",
                    "type": "string"
                },
                "hostedOn": {
                    "description": "HostedOn is the ID of the host running this container (creates graph relationship)",
                    "type": "string"
                },
                "name": {
                    "description": "Name is the human-readable container name (required, indexed)",
                    "type": "string"
                },
                "ports": {
                    "description": "Ports are the network port mappings for this container",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Port"
                    }
                },
                "status": {
                    "description": "Status is the container runtime status (running, stopped, paused, etc.)",
                    "type": "string"
                }
            }
        },
        "models.ContainerPlacement": {
            "type": "object",
            "properties": {
                "containerId": {
                    "description": "ContainerID is the Docker container ID",
                    "type": "string"
                },
                "containerName": {
                    "description": "ContainerName is the container name",
                    "type": "string"
                },
                "hostId": {
                    "description": "HostID is the host where the container is running",
                    "type": "string"
                },
                "ipAddress": {
                    "description": "IPAddress is the host IP address",
                    "type": "string"
                },
                "ports": {
                    "description": "Ports maps container ports to exposed host ports",
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer"
                    }
                },
                "startedAt": {
                    "description": "StartedAt is when the container started",
                    "type": "string"
                },
                "status": {
                    "description": "Status is the container status",
                    "type": "string"
                }
            }
        },
        "models.DeploymentConfig": {
            "type": "object",
            "properties": {
                "hostConstraints": {
                    "description": "HostConstraints define placement rules per container",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.HostConstraint"
                    }
                },
                "mode": {
                    "description": "Mode is the deployment mode: \"single-host\" or \"multi-host\"",
                    "type": "string"
                },
                "networkMode": {
                    "description": "NetworkMode defines cross-host networking\nValues: \"host-port\" (exposed ports), \"overlay\" (Docker overlay network)",
                    "type": "string"
                },
                "placementStrategy": {
                    "description": "PlacementStrategy defines how containers are placed on hosts\nValues: \"auto\", \"manual\", \"datacenter\", \"spread\"",
                    "type": "string"
                }
            }
        },
        "models.Host": {
            "type": "object",
            "properties": {
                "@context": {
                    "description": "Context is the JSON-LD @context URL (typically https://schema.org)",
                    "type": "string"
                },
                "@id": {
                    "description": "ID is the unique host identifier (maps to CouchDB _id)",
                    "type": "string"
                },
                "@type": {
                    "description": "Type is the JSON-LD @type (ComputerSystem for hosts)",
                    "type": "string"
                },
                "_rev": {
                    "description": "Rev is the CouchDB document revision for optimistic locking",
                    "type": "string"
                },
                "cpu": {
                    "description": "CPU is the number of CPU cores available",
                    "type": "integer"
                },
                "ipAddress": {
                    "description": "IPAddress is the host's IP address (required, indexed)",
                    "type": "string"
                },
                "location": {
                    "description": "Datacenter is the physical or logical location of the host",
                    "type": "string"
                },
                "memory": {
                    "description": "Memory is the total memory in bytes",
                    "type": "integer"
                },
                "name": {
                    "description": "Name is the human-readable host name (required, indexed)",
                    "type": "string"
                },
                "status": {
                    "description": "Status is the host operational status (active, maintenance, offline)",
                    "type": "string"
                }
            }
        },
        "models.HostConstraint": {
            "type": "object",
            "properties": {
                "containerName": {
                    "description": "ContainerName is the name of the container to constrain",
                    "type": "string"
                },
                "labels": {
                    "description": "Labels are custom labels that the host must have",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "minCpu": {
                    "description": "MinCPU is the minimum CPU cores required",
                    "type": "integer"
                },
                "minMemory": {
                    "description": "MinMemory is the minimum memory in bytes required",
                    "type": "integer"
                },
                "requiredDatacenter": {
                    "description": "RequiredDatacenter requires the container to be in this datacenter",
                    "type": "string"
                },
                "targetHost": {
                    "description": "TargetHostID is the specific host ID (for manual placement)",
                    "type": "string"
                }
            }
        },
        "models.NetworkConfig": {
            "type": "object",
            "properties": {
                "environmentVariables": {
                    "description": "EnvironmentVariables contains injected environment variables for cross-host connections",
                    "type": "object",
                    "additionalProperties": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                },
                "mode": {
                    "description": "Mode is the networking mode (host-port or overlay)",
                    "type": "string"
                },
                "overlayNetworkId": {
                    "description": "OverlayNetworkID is the Docker overlay network ID (if mode is overlay)",
                    "type": "string"
                },
                "serviceEndpoints": {
                    "description": "ServiceEndpoints maps container names to their connection endpoints\nFormat: {\"postgres\": \"192.168.1.10:5432\", \"redis\": \"192.168.1.11:6379\"}",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "models.Port": {
            "type": "object",
            "properties": {
                "containerPort": {
                    "description": "ContainerPort is the port number inside the container",
                    "type": "integer"
                },
                "hostPort": {
                    "description": "HostPort is the port number on the host machine",
                    "type": "integer"
                },
                "protocol": {
                    "description": "Protocol is the network protocol (tcp, udp, sctp)",
                    "type": "string"
                }
            }
        },
        "models.Role": {
            "type": "string",
            "enum": [
                "admin",
                "user",
                "viewer",
                "agent"
            ],
            "x-enum-varnames": [
                "RoleAdmin",
                "RoleUser",
                "RoleViewer",
                "RoleAgent"
            ]
        }
    }
}