version: '3'

vars:
  APP_NAME: graphium
  MODULE: evalgo.org/graphium
  VERSION:
    sh: git describe --tags --always --dirty 2>/dev/null || echo "dev"
  BUILD_TIME:
    sh: date -u +"%Y-%m-%dT%H:%M:%SZ"
  GIT_COMMIT:
    sh: git rev-parse --short HEAD 2>/dev/null || echo "unknown"
  REGISTRY: ghcr.io/evalgo
  LDFLAGS: >-
    -X main.Version={{.VERSION}}
    -X main.BuildTime={{.BUILD_TIME}}
    -X main.GitCommit={{.GIT_COMMIT}}
    -w -s

env:
  CGO_ENABLED: 0

tasks:
  default:
    desc: Show available tasks
    cmds:
      - task --list

  install:
    desc: Install dependencies
    cmds:
      - go mod download
      - go mod tidy

  generate:
    desc: Generate code from models
    dir: models
    cmds:
      - go generate
    sources:
      - "*.go"

  build:
    desc: Build Graphium CLI
    deps:
      - generate
    cmds:
      - |
        go build \
          -ldflags "{{.LDFLAGS}}" \
          -o bin/{{.APP_NAME}} \
          {{.MODULE}}/cmd/{{.APP_NAME}}
        echo "✓ Built bin/{{.APP_NAME}}"

  run:
    desc: Run Graphium server
    deps:
      - build
    cmds:
      - ./bin/{{.APP_NAME}} server

  run:dev:
    desc: Run in development mode
    deps:
      - generate
    cmds:
      - go run -ldflags "{{.LDFLAGS}}" {{.MODULE}}/cmd/{{.APP_NAME}} server --log-level debug

  test:
    desc: Run all tests
    cmds:
      - go test -v -race -short ./...

  test:unit:
    desc: Run unit tests only
    cmds:
      - |
        go test -v -short -coverprofile=coverage.out ./internal/...
        go tool cover -html=coverage.out -o coverage.html
        echo "✓ Coverage report generated: coverage.html"

  test:validation:
    desc: Run validation package tests
    cmds:
      - go test -v -coverprofile=coverage-validation.out ./internal/validation/...
      - go tool cover -func=coverage-validation.out

  test:integration:
    desc: Run integration tests (requires running server)
    cmds:
      - |
        echo "⚠️  Make sure the API server and CouchDB are running!"
        echo "   Run 'task dev' in another terminal first."
        echo ""
        go test -v -tags=integration ./tests/...

  test:coverage:
    desc: Generate coverage report
    cmds:
      - |
        go test -coverprofile=coverage.out ./...
        go tool cover -func=coverage.out
        go tool cover -html=coverage.out -o coverage.html
        echo "✓ Coverage report: coverage.html"

  test:watch:
    desc: Watch and run tests on file changes
    cmds:
      - |
        echo "Watching for changes..."
        while true; do
          go test -short ./...
          inotifywait -q -r -e modify ./internal ./models ./agent
        done

  clean:
    desc: Clean build artifacts
    cmds:
      - |
        rm -rf bin/
        rm -rf generated/
        rm -rf dist/
        echo "✓ Cleaned"

  version:
    desc: Show version
    cmds:
      - |
        echo "Graphium {{.VERSION}}"
        echo "Commit: {{.GIT_COMMIT}}"
        echo "Built: {{.BUILD_TIME}}"

  fmt:
    desc: Format all code
    cmds:
      - |
        go fmt ./...
        gofmt -s -w .
        echo "✓ Code formatted"

  lint:fix:
    desc: Auto-fix linting issues
    cmds:
      - golangci-lint run --fix

  dev:setup:
    desc: Set up development environment
    cmds:
      - |
        echo "🔧 Setting up Graphium development environment..."

        # Check if Docker is installed
        if ! command -v docker &> /dev/null; then
          echo "❌ Docker is not installed. Please install Docker first."
          exit 1
        fi

        # Check if CouchDB container exists
        if docker ps -a | grep -q graphium-couchdb; then
          echo "✓ CouchDB container already exists"
        else
          echo "📦 Creating CouchDB container..."
          docker run -d \
            --name graphium-couchdb \
            -p 5984:5984 \
            -e COUCHDB_USER=admin \
            -e COUCHDB_PASSWORD=password \
            -v graphium-data:/opt/couchdb/data \
            couchdb:3.3

          echo "⏳ Waiting for CouchDB to be ready..."
          sleep 5

          # Create database
          curl -X PUT http://admin:password@localhost:5984/graphium
          echo ""
        fi

        # Check if CouchDB is running
        if ! docker ps | grep -q graphium-couchdb; then
          echo "🚀 Starting CouchDB container..."
          docker start graphium-couchdb
          sleep 3
        fi

        # Install Go dependencies
        echo "📥 Installing Go dependencies..."
        go mod download
        go mod tidy

        # Create config if it doesn't exist
        if [ ! -f configs/config.yaml ]; then
          echo "📝 Creating default config..."
          mkdir -p configs
          cat > configs/config.yaml << 'EOF'
        server:
          host: 0.0.0.0
          port: 8080
          read_timeout: 30
          write_timeout: 30
          shutdown_timeout: 10
          debug: true

        couchdb:
          url: http://localhost:5984
          database: graphium
          username: admin
          password: password
          timeout: 30

        logging:
          level: debug
          format: json

        security:
          rate_limit: 100
          allowed_origins:
            - "*"

        agent:
          api_url: http://localhost:8080
          sync_interval: 30
          host_id: ""
          datacenter: ""
        EOF
        fi

        echo "✅ Development environment ready!"
        echo ""
        echo "Next steps:"
        echo "  1. Run 'task dev' to start the development server"
        echo "  2. CouchDB Fauxton UI: http://localhost:5984/_utils"
        echo "  3. API will be available at: http://localhost:8080"

  dev:
    desc: Start development environment
    deps:
      - dev:setup
    cmds:
      - |
        echo "🚀 Starting Graphium development server..."
        echo ""
        echo "📊 CouchDB: http://localhost:5984/_utils (admin/password)"
        echo "🌐 API: http://localhost:8080"
        echo "📡 WebSocket: ws://localhost:8080/api/v1/ws"
        echo ""
        go run -ldflags "{{.LDFLAGS}}" {{.MODULE}}/cmd/{{.APP_NAME}} server --log-level debug

  dev:stop:
    desc: Stop development environment
    cmds:
      - |
        echo "🛑 Stopping development environment..."
        docker stop graphium-couchdb
        echo "✓ CouchDB stopped"

  dev:clean:
    desc: Clean development environment (removes data!)
    cmds:
      - |
        echo "⚠️  This will delete all CouchDB data!"
        read -p "Are you sure? (yes/no): " confirm
        if [ "$confirm" = "yes" ]; then
          docker stop graphium-couchdb 2>/dev/null || true
          docker rm graphium-couchdb 2>/dev/null || true
          docker volume rm graphium-data 2>/dev/null || true
          echo "✓ Development environment cleaned"
        else
          echo "Cancelled"
        fi

  dev:logs:
    desc: Show CouchDB logs
    cmds:
      - docker logs -f graphium-couchdb
